import java.time.Instant
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit
import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '6.1.0'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '0.1.0'
group = 'org.teacon'
archivesBaseName = 'ResourceSync'

// Mojang ships Java 8 to end users, so we target Java 8 at minimum.
java.toolchain.languageVersion = JavaLanguageVersion.of(8) 

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run_client')

            property 'forge.logging.console.level', 'info'

            mods {
                resource_sync {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            mods {
                resource_sync {
                    source sourceSets.main
                }
            }
        }
        // There is no data to generate for this mod.
    }
}

configurations {
    compileClasspath.extendsFrom(shadow)
    runtimeClasspath.extendsFrom(shadow)
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.0.48'
    shadow 'org.apache.httpcomponents:httpclient-cache:4.3.3'
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.shadow]
    dependencies {
        exclude it.dependency('org.apache.httpcomponents:httpclient:.*')
        exclude it.dependency('org.apache.httpcomponents:httpcore:.*')
        exclude it.dependency('commons-logging:commons-logging:.*')
        exclude it.dependency('commons-codec:commons-codec:.*')
    }
    relocate 'org.apache', 'org.teacon.sync.repackage.org.apache'
}

jar {
    archiveClassifier.set('pure')
    manifest {
        attributes([
            "Specification-Title": "ResourceSync",
            "Specification-Vendor": "3TUSK",
            "Specification-Version": "0.1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.version}",
            "Implementation-Vendor": "TeaConMC",
            "Implementation-Timestamp": DateTimeFormatter.ISO_INSTANT.format(Instant.now().truncatedTo(ChronoUnit.SECONDS))
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
shadowJar.finalizedBy('reobfJar')
// make build task depend on shadowJar
assemble.dependsOn('shadowJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
publish.dependsOn('reobfJar')

publishing {
    publications {
        release(MavenPublication) {
            groupId = "org.teacon"
            artifactId = "ResourceSync-Forge-1.16"

            artifact shadowJar
            pom {
                name = 'ResourceStnc for Minecraft 1.16'
                description = 'Minecraft mod that preemptively keeps resource pack updated'
                url = 'https://github.com/teaconmc/ResourceSync'
                licenses {
                    license {
                        name = 'BSD-3-Clause'
                        url = 'https://github.com/teaconmc/ResourceSync/blob/1.16-forge/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = '3TUSK'
                        name = '3TUSK'
                    }
                }
                issueManagement {
                    system = 'GitHub Issues'
                    url = 'https://github.com/teaconmc/ResourceSync/issues'
                }
                scm {
                    url = 'https://github.com/teaconmc/ResourceSync'
                    connection = 'scm:git:git://github.com/teaconmc/ResourceSync.git'
                    developerConnection = 'scm:git:git@github.com:teaconmc/ResourceSync.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = "archive"
            url = "https://maven.hub.tritusk.info/releases"
            credentials {
                username = System.env.MAVEN_USERNAME
                password = System.env.MAVEN_PASSWORD
            }
        }
    }
}

tasks.withType(PublishToMavenRepository) {
    onlyIf {
        System.env.MAVEN_USERNAME && System.env.MAVEN_PASSWORD
    }
}

/**
 * A simple task to pass down the artifact name and path to other GitHub actions.
 */
task("githubActionOutput") {
    onlyIf {
        System.env.GITHUB_ACTIONS
    }
    doLast {
        println "::set-output name=artifact_path::${jar.archiveFile.get().asFile.absolutePath}"
        println "::set-output name=artifact_name::${jar.archiveFileName.get()}"
    }
}